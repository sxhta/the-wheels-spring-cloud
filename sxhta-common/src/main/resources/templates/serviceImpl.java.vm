package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
#if(${table.serviceInterface})
import ${package.Service}.${table.serviceName};
#end
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;

import java.io.Serial;
import java.io.Serializable;

import com.sxhta.cloud.security.service.TokenService;
/**
 * $!{table.comment} 服务实现类
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>()#if(${table.serviceInterface}), ${table.serviceName}#end {

        }
#else
    ##public class ${table.serviceImplName} extends ServiceImpl<${table.mapperName}, ${entity}>
    ##        implements ${entity}Service, Serializable #end {
        public class ${table.serviceImplName} extends ServiceImpl<${table.mapperName}, ${entity}>#if(${table.serviceInterface}) implements ${table.serviceName},Serializable #end {
        @Serial
        private static final long serialVersionUID=1L;

        @Inject
        private TokenService<SystemUserCacheVo,SysUser>tokenService;


        @Override
        public Boolean create(${entity}Request request){
        final var entity=new ${entity}();
        BeanUtils.copyProperties(request,entity);
        final var loginUser=tokenService.getLoginUser();
        final var createBy=loginUser.getUsername();
        entity.setCreateBy(createBy);
        return save(entity);
        }

        @Override
        public ${entity}Response getInfoByHash(String hash){
        final var lqw=new LambdaQueryWrapper<${entity}>();
        lqw.eq(${entity}::getHash,hash);
        final var entity=getOne(lqw);
        if(ObjectUtil.isNull(entity)){
        throw new CommonNullException("");
        }
        final var response=new ${entity}Response();
        BeanUtils.copyProperties(entity,response);
        return response;
        }

        @Override
        public Boolean softDeleteByHash(String hash){
        final var lqw=new LambdaQueryWrapper<${entity}>();
        lqw.eq(${entity}::getHash,hash);
        final var entity=getOne(lqw);
        if(ObjectUtil.isNull(entity)){
        throw new CommonNullException("");
        }
        entity.setDeleteTime(LocalDateTime.now());
        return updateById(entity);
        }

        @Override
        public Boolean deleteByHash(String hash){
        final var lqw=new LambdaQueryWrapper<${entity}>();
        lqw.eq(${entity}::getHash,hash);
        final var entity=getOne(lqw);
        if(ObjectUtil.isNull(entity)){
        throw new CommonNullException("");
        }
        return removeById(entity);
        }

        @Override
        public Boolean updateEntity(${entity}Request request){
        final var hash=request.getHash();
        final var lqw=new LambdaQueryWrapper<${entity}>();
        lqw.eq(${entity}::getHash,hash);
        final var entity=getOne(lqw);
        if(ObjectUtil.isNull(entity)){
        throw new CommonNullException("");
        }
        BeanUtils.copyProperties(request,entity);
        return updateById(entity);
        }

        @Override
        public List<${entity}Response>getAdminList(${entity}SearchRequest request){
        final var lqw=new LambdaQueryWrapper<${entity}>();
        lqw.isNull(${entity}::getDeleteTime);

        final var entityList=list(lqw);
        final var responseList=new ArrayList<${entity}Response>();
        entityList.forEach(entity->{
        final var response=new ${entity}Response();
        BeanUtils.copyProperties(entity,response);
        responseList.add(response);
        });
        return responseList;
        }

        }
#end
